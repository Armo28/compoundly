import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

type Totals = {
  TFSA: number;
  RRSP: number;
  LIRA: number;
  MARGIN: number;
  OTHER: number;
  overall: number;
};

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  { auth: { persistSession: false } }
);

export async function GET(req: NextRequest) {
  try {
    const userId = req.headers.get('x-user-id');
    if (!userId) return NextResponse.json({ error: 'Missing x-user-id' }, { status: 401 });

    // Get this user's accounts
    const { data: accounts, error: accErr } = await supabaseAdmin
      .from('accounts')
      .select('id, type')
      .eq('user_id', userId);

    if (accErr) return NextResponse.json({ error: accErr.message }, { status: 500 });

    if (!accounts?.length) {
      const empty: Totals = { TFSA: 0, RRSP: 0, LIRA: 0, MARGIN: 0, OTHER: 0, overall: 0 };
      return NextResponse.json({ totals: empty, byAccount: [] });
    }

    const idToType = new Map<string, string>();
    for (const a of accounts) idToType.set(a.id, a.type ?? 'OTHER');

    // Sum positions by account
    const ids = accounts.map(a => a.id);
    const { data: positions, error: posErr } = await supabaseAdmin
      .from('positions')
      .select('account_id, market_value')
      .in('account_id', ids);

    if (posErr) return NextResponse.json({ error: posErr.message }, { status: 500 });

    const totals: Totals = { TFSA: 0, RRSP: 0, LIRA: 0, MARGIN: 0, OTHER: 0, overall: 0 };
    const byAccount: Array<{ account_id: string; type: string; value: number }> = [];

    for (const p of positions ?? []) {
      const t = idToType.get(p.account_id) || 'OTHER';
      const v = Number(p.market_value ?? 0);
      (totals as any)[t] = ((totals as any)[t] ?? 0) + v;
      totals.overall += v;
      byAccount.push({ account_id: p.account_id, type: t, value: v });
    }

    return NextResponse.json({ totals, byAccount });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message ?? 'unknown error' }, { status: 500 });
  }
}
